<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/jms 
       http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:p="http://www.springframework.org/schema/p">



	<description>Example configuration to get you started.</description>


	<tx:annotation-driven />


	<!-- <bean id="sessionFactory" -->
	<!-- class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- <property name="packagesToScan" value="com.innowhite.PlaybackApp" /> -->
	<!-- <property name="schemaUpdate" value="true" /> -->
	<!-- <property name="hibernateProperties"> -->
	<!-- <props> -->
	<!-- <prop key="hibernate.format_sql">true</prop> -->
	<!-- <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> -->
	<!-- </props> -->
	<!-- </property> -->
	<!-- </bean> -->




	<!-- A connection to ActiveMQ -->
	<bean id="amqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"
		p:brokerURL="tcp://messaging.innowhite.com:61616" />


	<!-- A cached connection to wrap the ActiveMQ connection -->
	<bean id="cachedConnectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory"
		p:targetConnectionFactory-ref="amqConnectionFactory"
		p:sessionCacheSize="10" />

	<!-- A POJO that implements the JMS message listener for Whiteboard Data -->
	<bean id="playBackDataMsgListener" class="com.innowhite.PlaybackApp.messaging.PlayBackMsgListener">
		<property name="taskExecutorExample" ref="taskExecutorExample" />
	</bean>

	<!-- The Spring message listener container configuration -->
	<jms:listener-container container-type="default"
		connection-factory="cachedConnectionFactory" acknowledge="auto">
		<jms:listener destination="Innowhite.playBack" ref="playBackDataMsgListener"
			method="onMessage" />
	</jms:listener-container>
	



	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>

				<value>WEB-INF/spring/innowhite.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${pword}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.innowhite.PlaybackApp" />
		<property name="schemaUpdate" value="false" />
		<property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" />


		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="use_sql_comments">true</prop>


			</props>
		</property>
	</bean>

	<bean id="playBackVO" name="playBackVO"
		class="com.innowhite.PlaybackApp.util.PlaybackVO">

		<property name="winFFmpegPath" value="${winFFmpegPath}" />
		<property name="macFFmpegPath" value="${macFFmpegPath}" />
		<property name="ubuntuFFmpegPath" value="${ubuntuFFmpegPath}" />
		
		<property name="winTempLocation" value="${winTempLocation}" />
		<property name="macTempLocation" value="${macTempLocation}" />
		<property name="ubuntuTempLocation" value="${ubuntuTempLocation}" />

		<property name="winVideoPath" value="${winVideoPath}" />
		<property name="winAudioPath" value="${winAudioPath}" />
		
		<property name="winMp3WrapPath" value="${winMp3WrapPath}" />
		<property name="macMp3WrapPath" value="${macMp3WrapPath}" />
		<property name="ubuntuMp3WrapPath" value="${ubuntuMp3WrapPath}" />
		
		<property name="winMencoderPath" value="${winMencoderPath}" />
		<property name="macMencoderPath" value="${macMencoderPath}" />
		<property name="ubuntuMencoderPath" value="${ubuntuMencoderPath}" />
		
		<property name="winSilentAudioPath" value="${winSilentAudioPath}" />
		<property name="ubuntuSilentAudioPath" value="${ubuntuSilentAudioPath}" /> 
		
		
	</bean>


	<bean id="playBackPlayListDao" name="playBackPlayListDao"
		class="com.innowhite.PlaybackApp.dao.PlayBackPlayListDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="whiteboardDataDao" name="whiteboardDataDao"
		class="com.innowhite.PlaybackApp.dao.WhiteboardDataDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="audioDataDao" name="audioDataDao"
		class="com.innowhite.PlaybackApp.dao.AudioDataDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="videoDataDao" name="videoDataDao"
		class="com.innowhite.PlaybackApp.dao.VideoDataDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="sessionRecordingsDao" name="sessionRecordingsDao"
		class="com.innowhite.PlaybackApp.dao.SessionRecordingDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>



	<!-- <bean id="playThreadExecutor" name="playThreadExecutor" -->
	<!-- class="com.innowhite.PlaybackApp.service.ThreadExecutor"> -->

	<!-- <property name="playbackDataservice" ref="playbackDataservice" /> -->

	<!-- </bean> -->

	<!-- <bean id="basicThreadCreator" name="basicThreadCreator" scope="prototype" -->
	<!-- class="com.innowhite.PlaybackApp.service.BasicThreadCreator"> -->
	<!-- <property name="playThreadExecutor" ref="playThreadExecutor" /> -->

	<!-- </bean> -->

	<bean id="playbackDataservice" name="playbackDataservice"
		class="com.innowhite.PlaybackApp.service.PlaybackDataService">
		<property name="audioDataDao" ref="audioDataDao" />
		<property name="videoDataDao" ref="videoDataDao" />
		<property name="sessionRecordingsDao" ref="sessionRecordingsDao" />
		<property name="playbackVO" ref="playBackVO" />
		<property name="playBackPlayListDao" ref="playBackPlayListDao" />

	</bean>

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="10" />
		<property name="queueCapacity" value="25" />
	</bean>

	<bean id="taskExecutorExample" class="com.innowhite.PlaybackApp.service.TaskExecutorExample">
		<constructor-arg ref="taskExecutor" />
		<constructor-arg ref="playbackDataservice" />
	</bean>



</beans>
